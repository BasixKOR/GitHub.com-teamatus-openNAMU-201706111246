/**
 * NamuMarked Utils
 * Copyright RedPumpkin.
 * 
 * MIT Licensed.
 */
'use strict';

module.exports = {
	replace: replace,
	extend: extend,
	opt: opt
};

/**
 * https://github.com/chjj/marked/blob/fd0d1a2935176c49918ec84d5cf13fcc25312fe9/lib/marked.js#L1110
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */
function replace(regex) {
	let opt = regex.flags || '';
	regex = regex.source || regex;

	return function self(name, val, nrm) {
		if (!name) return new RegExp(regex, opt);
		val = val.source || val;
		if (!nrm) val = val.replace(/(^|[^\\\[])\^/g, '$1');
		regex = regex.replace(name, val);
		return self;
	};
}

function extend(a) {
	let b;
	let i = 1;
	let l = arguments.length;
	let key;

	for(; i < l; i++) {
		b = arguments[i];
		for (key in b) {
			if (b.hasOwnProperty(key)) {
				a[key] = b[key];
			}
		}
	}
	
	return a;
}

function opt(a) {
	let b;
	let i = 1;
	let l = arguments.length;
	let key;

	for (; i < l; i++) {
		b = arguments[i];
		for (key in b) {
			if (a.hasOwnProperty(key) && b.hasOwnProperty(key)) {
				a[key] = b[key];
			}
		}
	}
}