/**
 * NamuMarked - a namumark parser
 * (C) RedPumpkin.
 * 
 * Licensed under the MIT license.
 */
'use strict';

const Lexer = require('./Lexer');
const InlineLexer = require('./InlineLexer');
const Parser = require('./Parser');
const Renderer = require('./Renderer');
const utils = require('./utils');

/**
 * Default options
 */
let default_options = {
	image_ext: [],
}

/**
 * NamuMarked class
 */
class NamuMarked {
	constructor(opt) {
		this._opt = utils.opt(default_options, opt || {});

		this._lexer = new Lexer(this._opt);
		this._renderer = new Renderer(this._opt);
		this._inline = new InlineLexer(this._opt);
		this._parser = new Parser(this._opt);
	}

	/**
	 * Normalize
	 */
	normalize(src) {
		return src.replace(/\r\n|\r/g, '\n')
				.replace(/\t/g, '	')
				.replace(/\u00a0/g, ' ')
				.replace(/\u2424/g, '\n');
	}

	/**
	 * Parsing
	 */
	text(src) {
		if (!src) {
			return '';
		}
		if (typeof src !== 'string') {
			src = src.toString();
		}
		src = this.normalize(src);

		// Lexing
		src = this._lexer.lex(src);

		// Inline lexing
		src = this._inline.lex(src, this._renderer);

		// Parsing
		return this._parser.parse(src, this._renderer);
	}


	///////////////////////
	/// Getter / Setter ///
	///////////////////////

	/**
	 * Set renderer
	 */
	setRenderer(renderer) {
		this._renderer = renderer;
	}

	/**
	 * Get renderer
	 */
	getRenderer() {
		return this._renderer;
	}

	/**
	 * Set lexer
	 */
	setLexer(lexer) {
		this._lexer = lexer;
	}

	/**
	 * Get lexer
	 */
	getLexer() {
		return this._lexer;
	}

	/**
	 * Set inline lexer
	 */
	setInlineLexer(inline) {
		this._inline = inline;
	}

	/**
	 * Get inline lexer
	 */
	getInlineLexer() {
		return this._inline;
	}

	/**
	 * Set parser
	 */
	setParser(parser) {
		this._parser = parser;
	}

	/**
	 * Get parser
	 */
	getParser() {
		return this._parser;
	}
}

/**
 * Parsing with default classes
 */
function namumarked(src, opt) {
	let namumarked = new NamuMarked(opt);
	return namumarked.text(src);
}

/**
 * Expose
 */
namumarked.NamuMarked = NamuMarked;
namumarked.Lexer = Lexer;
namumarked.InlineLexer = InlineLexer;
namumarked.Parser = Parser;
namumarked.Renderer = Renderer;

module.exports = namumarked;